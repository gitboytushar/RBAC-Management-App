const router = require('express').Router()
const Card = require('../models/employeeCard')
const User = require('../models/user')
const { authenticateToken } = require('./auth')

// create employee card api - working
router.post('/create-card', authenticateToken, async (req, res) => {
  try {
    // get data and save it
    const { name, role, email, department, state } = req.body
    const { id } = req.headers

    // Check if the User exists
    const user = await User.findById(id)
    if (!user) {
      return res.status(404).json({ message: 'User not found!' })
    }

    // Create and save new card
    const newCard = new Card({
      name: name,
      role: role,
      email: email,
      department: department,
      state: state // Include state field
    })

    const saveCard = await newCard.save()

    // update user's card-Array with the new card Id (id comes from the default id generated by mongodb)
    const cardId = saveCard._id
    await User.findByIdAndUpdate(
      id,
      { $push: { cards: cardId._id } },
      { new: true }
    )

    res
      .status(201)
      .json({ message: 'Card created successfully ðŸŽ‰', card: saveCard })
  } catch (error) {
    console.log(error)
    res.status(500).json({ message: 'Internal Server Error' })
  }
})

// fetch employee cards api - some issue
router.get('/get-all-cards', authenticateToken, async (req, res) => {
  try {
    const { id } = req.headers

    // get all the cards with their respective data
    const userData = await User.findById(id).populate({
      path: 'cards', // Correct path name
      options: { sort: { createdAt: -1 } }
    })

    if (!userData) {
      return res.status(404).json({ message: 'User not found!' })
    }

    // send only the cards data to the client
    res.status(200).json({ cards: userData.cards })
  } catch (error) {
    console.log(error)
    res.status(500).json({ message: 'Internal Server Error' })
  }
})

// delete employee card api - working
router.delete('/delete-card/:id', authenticateToken, async (req, res) => {
  try {
    const { id } = req.params
    const userId = req.headers.id

    // Check if the card exists
    const card = await Card.findById(id)
    if (!card) {
      return res.status(404).json({ message: 'Card not found!' })
    }
    // delete the card
    await Card.findByIdAndDelete(id)
    // also delete the card from the user's card-Array in database
    await User.findByIdAndUpdate(userId, { $pull: { cards: id } })

    // response
    res.status(200).json({ message: 'Card deleted successfully ðŸŽ‰' })
  } catch (error) {
    console.log(error)
    res.status(500).json({ message: 'Internal Server Error' })
  }
})

// update employee card api -
router.put('/update-card/:id', authenticateToken, async (req, res) => {
  try {
    const { id } = req.params
    const { name, role, email, department, state } = req.body

    // Check if the card exists
    const card = await Card.findById(id)
    if (!card) {
      return res.status(404).json({ message: 'Card not found!' })
    }

    // update the card
    await Card.findByIdAndUpdate(
      id,
      {
        name: name,
        role: role,
        email: email,
        department: department,
        state: state
      },
      { new: true }
    )

    // response
    res.status(200).json({ message: 'Card updated successfully ðŸŽ‰' })
  } catch (error) {
    console.log(error)
    res.status(500).json({ message: 'Internal Server Error' })
  }
})

module.exports = router
